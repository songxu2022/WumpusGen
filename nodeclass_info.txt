NODE CLASS

Purpose: The node class is designed to keep track of all of the information about one node. A node is an individual spot on the game board.

Arguments: A node object takes in its x coordinate, x coordinate, label, and the wall size. The x and y coordinates are the node's position on the game board as a whole. The label is any markings the node has (for example if the node had a wumpus on it, the label would be w for wumpus). The wall size is the dimensions of the game board that the node is on (for example if the game board was 4x4, then the wall size would be entered as 4). 

Common abbreviations used:
nw = no wumpus
np = no pit
ng = no gold
w = wumpus
p = pit
g = gold
s = start
e = empty
v = visited

Functions: 
This class contains getters for all of the arguments. This class conatains a setter for the label only, since it is the only argument that is subject to change. 
This class contains multiple bools for what is around the node, like if it is in a corner or next to one of the many walls. There are also many bools that deal with the label and checks if the node is labeled as having a particular obstacle or not. For example, there is bool is_pit() which checks if the label of the node says there is a pit in that spot, and additionally there is bool is_notpit_marked() which checks if the label of the node says there is no pit at that location. 
The void killw() function was made for when there is a wumpus in a particular spot and the game player wants to shoot the wumpus and kill it. This function says if the node shot at was labeled w, it will change the label of that spot to not empty and the nw bool (that is defaulted to false) to be set to true. If the node shot at was not labeled as having a wumpus, then nothing happens. 
There are many bools at the bottom that automatically default to false such as bool nw and bool stench. These default to false because until we have further information, we assume that our node is not next to an obstacle, and when the player gets information that the node is in fact next to a pit, wumpus or other obstacle, it can change these bools to true. This helps keep track of what we know about a node.

NODECLASSTESTS.CPP:
This file is a testing file for all the functions of the node class. Each test in the NodeClassTests.cpp tests something that could go wrong with creating a Node using the node class.
bool invalid_input_test() tests that giving the node class negative numbers for the x and y coordinates will not work and will be changed to 0. It also tests that the node class will change any wall size that is less than 4 to 4, because a grid cannot be smaller than 4x4. The last thing it tests is that the coorindates are reasonable given the wall size. For example, if there was a grid that was only 4x4, there could not be a Node at (10,10). My class should correct any coordinate greater than the given wall size to the largest possible x or y coordinate it could reasonably be.
bool change_label_test() tests the label setter and makes sure that all bools associated with a label are changed when the label is changed.
bool wall_test() tests that all the bools that indicate a Node spot is next to a wall work, and that the wall bools are false for any Node that is in the middle of the game board.
bool default_bool_test() tests that all of the bools that the node class defaults to false can be changed to true and will stay true if they are told to do so.
bool killw_test() tests that the function for killing the wumpus only works on spots that are labeled "w" as having a wumpus on them, and that this function will make no changes if called on a spot that is not labeled as having a wumpus on it. 
